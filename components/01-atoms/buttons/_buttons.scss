@use 'sass:map';
@use '../../00-base/functions/color' as *;
@use '../../00-base/functions/rem-calc' as *;
@use '../../00-base/spacing/spacing' as *;
@use '../../00-base/motion/motion' as *;

// This reset mixin is used to remove browser default styles for button
// elements that shouldn't look like a traditional "button".
@mixin reset {
  border: 0;
  background: transparent;
  padding: 0;
  color: inherit;
}

$button-styles: (
  filled: (
    text: clr(full-white),
    text-hover: clr(primary, dark),
    text-inverse: clr(primary, dark),
    text-inverse-hover: clr(full-white),
    bg: clr(primary, dark),
    bg-hover: clr(primary, 0),
    bg-inverse: clr(full-white),
    bg-inverse-hover: clr(full-white, 0),
    border: clr(primary, dark),
    border-hover: clr(primary, dark),
    border-inverse: clr(full-white),
    border-inverse-hover: clr(full-white),
  ),
  outline: (
    text: clr(full-black),
    text-hover: clr(full-white),
    text-inverse: clr(full-white),
    text-inverse-hover: clr(primary, dark),
    bg: clr(accent, light, 0),
    bg-hover: clr(primary, dark),
    bg-inverse: clr(primary, light, 0),
    bg-inverse-hover: clr(full-white),
    border: clr(full-black),
    border-hover: clr(primary, dark),
    border-inverse: clr(full-white),
    border-inverse-hover: clr(full-white),
  ),
  clean: (
    text: clr(text),
    bg: transparent,
    bg-hover: transparent,
    bg-inverse: transparent,
    border: transparent,
    border-inverse: transparent,
    border-hover: transparent,
    text-hover: clr(text),
    text-inverse: clr(text, inverse),
    text-inverse-hover: clr(text, inverse),
    bg-inverse-hover: transparent,
  ),
  disabled: (
    text: clr(text, 0.9),
    text-hover: clr(text, inverse),
    text-inverse: clr(text, inverse, 0.9),
    text-inverse-hover: clr(text, inverse),
    bg: clr(background, 0.4),
    bg-hover: clr(background, inverse, 0.4),
    bg-inverse: clr(background, inverse, 0.4),
    bg-inverse-hover: clr(background, inverse, 0.2),
    border: clr(background, 0),
    border-hover: clr(background, inverse, 0),
    border-inverse: clr(background, inverse, 0),
    border-inverse-hover: clr(background, inverse, 0),
  ),
);

// Mixin to define colors for one or more schemes.
// Simply pass a color scheme to the mixin to get the colors defined in the map.
// e.g. @include button-color(primary) will get all of the colors defined in the
// "primary" section, including 'contrast' colors when appropriate.
@mixin button-color(
  $scheme,
  $palette: map.get($button-styles, $scheme),
  $map: $button-styles
) {
  &,
  &:visited {
    color: map.get($palette, text);
    background-color: map.get($palette, bg);
    border-color: map.get($palette, border);
  }

  &:hover,
  &:focus {
    color: map.get($palette, text-hover);
    background-color: map.get($palette, bg-hover);
    border-color: map.get($palette, border-hover);
  }

  [data-component-theme*='inverse']:not([data-component-theme*='yellow']) & {
    color: map.get($palette, text-inverse);
    background-color: map.get($palette, bg-inverse);
    border-color: map.get($palette, border-inverse);

    &:hover,
    &:focus {
      color: map.get($palette, text-inverse-hover);
      background-color: map.get($palette, bg-inverse-hover);
      border-color: map.get($palette, border-inverse-hover);
    }
  }

  &[disabled],
  &[data-button-style='disabled'] {
    background-color: map.get($palette, bg);
    border-color: map.get($palette, border);
    color: map.get($palette, text);

    [data-component-theme*='inverse']:not([data-component-theme*='yellow']) & {
      color: map.get($palette, text-inverse);
      background-color: map.get($palette, bg-inverse);
      border-color: map.get($palette, border-inverse);

      &:hover,
      &:focus {
        color: map.get($palette, text-inverse-hover);
        background-color: map.get($palette, bg-inverse-hover);
        border-color: map.get($palette, border-inverse-hover);
      }
    }
  }
}

// The button-base mixin contains styles that apply to all buttons
// regardless of color or size.
@mixin button-base {
  @include transition;

  display: inline-flex;
  align-items: center;
  justify-content: center;
  position: relative;
  border: 2px solid;
  font-weight: 500;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  text-transform: capitalize;
  border-radius: space(2);

  &[disabled],
  &[data-button-style='disabled'] {
    cursor: not-allowed;
    font-weight: 400;
  }

  > * {
    pointer-events: none;
  }
}

// Button size variations
@mixin button-size {
  padding: space(0.5) 1.4rem;
  font-size: fontsize(13);
}

@mixin button($type: null) {
  @include button-base;
  @include button-size;

  @if $type {
    @include button-color($type);
  }

  @each $scheme, $style in $button-styles {
    &[data-button-style='#{$scheme}'] {
      @include button-color($scheme);
    }
  }
}

button {
  appearance: none;
  padding: 0;
  border: 0;
  background-color: transparent;

  svg {
    width: rem-calc(24);
    max-height: rem-calc(24);
  }
}

.button-sous {
  @include button;

  &:hover:is(a),
  &:focus:is(a) {
    text-decoration: underline;
  }
}

.button-sous__content {
  [data-button-alignment='right'] & {
    margin-right: rem-calc(10);
  }

  [data-button-alignment='left'] & {
    margin-left: rem-calc(10);
  }
}

.button-sous__icon {
  display: flex;

  .icon {
    width: rem-calc(24);
    max-height: rem-calc(24);
  }
}

input[type='submit'] {
  @include button;
  @include button-color('filled');
}

input[data-drupal-selector='edit-reset'] {
  @include button;
  @include button-color('clean');
}
