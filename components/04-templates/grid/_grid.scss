@use 'sass:math';
@use '../../00-base/breakpoints/breakpoints' as *;
@use '../../00-base/functions/color' as *;
@use '../../00-base/functions/map' as *;
@use '../../00-base/spacing/spacing' as *;

// Define grid columns and their widths
$grids: (
  equal: (
    1: 1,
    2: 0.5,
    3: 0.33,
    4: 0.25,
  ),
);

// Utilize custom properties so they can be re-scoped
:root {
  --grid-spacing: #{space(4)};

  @include breakpoint('medium') {
    --grid-spacing: #{space(2)};
  }
}

.grid {
  &[data-grid-spacing='no-spacing'] {
    --grid-spacing: #{space(0)};
  }

  &[data-grid-spacing='two-spacing'] {
    --grid-spacing: #{space(4)};

    @include breakpoint('medium') {
      --grid-spacing: #{space(6)};
    }
  }

  + .grid,
  form ~ & {
    @include margin-gap-top(1.5);
    @include section-padding-top(1.5);

    border-top: 1px solid clr(neutral, n300);
  }
}

.grid__inner {
  display: flex;
  flex-flow: row wrap;

  .place-holder__content {
    font-size: 18px;
  }
}

.grid__inner > * {
  position: relative;
  margin: calc(var(--grid-spacing) / 2) auto 0;

  @include breakpoint('small') {
    margin: calc(var(--grid-spacing) / 2) auto;
  }

  @include breakpoint('small-down') {
    &:nth-child(2n + 1) {
      margin-left: 0;
      padding-left: 0;
    }

    &:nth-child(2n + 2) {
      margin-right: 0;
      padding-right: 0;
    }
  }

  @include breakpoint('medium') {
    margin: calc(var(--grid-spacing) / 2) calc(var(--grid-spacing) / 2) 0;
  }

  &:first-child {
    margin-block: 0 var(--grid-spacing);

    @include breakpoint('small') {
      margin: 0 auto 0 0;
    }

    @include breakpoint('medium') {
      margin: var(--grid-spacing) calc(var(--grid-spacing) / 2) 0;
    }
  }

  &:nth-child(2) {
    margin-top: 0;

    @include breakpoint('medium') {
      margin-top: calc(var(--grid-spacing) / 2);
    }
  }

  [data-teaser-layout='postcard'] & {
    margin-block: calc(var(--grid-spacing) / 4) 0;

    @include breakpoint('medium') {
      margin: var(--grid-spacing) calc(var(--grid-spacing) / 2) 0;
    }
  }

  // Loop through grid map to apply column specific styles
  // for both grid types.
  @each $type, $widths in $grids {
    @each $column, $width in $widths {
      $cadence: $column * 2;
      $start: $column + 1;
      $difference: 1 - $width;

      // Set column widths and generate offset layout.
      [data-grid-columns='#{$column}'] & {
        width: 100%;

        @include breakpoint('small') {
          width: calc(50% - calc(var(--grid-spacing) / 4));
        }

        @include breakpoint('medium') {
          width: calc(
            #{$width * 100}% - calc(var(--grid-spacing) * #{$difference})
          );

          &:nth-child(#{math.div($cadence, 2)}n + 1) {
            margin-left: 0;
            padding-left: 0;
          }

          &:nth-child(#{math.div($cadence, 2)}n + #{$column}) {
            margin-right: 0;
            padding-right: 0;
          }
        }

        &:first-child,
        &:nth-child(#{$column}),
        &:nth-child(#{$column - 1}),
        &:nth-child(#{$column - 2}) {
          @include breakpoint('medium') {
            margin-top: 0;
          }
        }
      }

      // Set separator styles.
      [data-grid-columns='#{$column}'][data-grid-separators] & {
        @include breakpoint('large') {
          &:not(:last-child) [class*='__media']::before {
            content: '';
            display: block;
            background-color: clr(neutral, n200);
            width: math.div(space(0.125), 2);
            height: 100%;
            position: absolute;
            top: 0;
            right: calc(
              calc(calc(var(--grid-spacing) * 0.5) + space(0.125)) * -1
            );
          }

          &:nth-child(#{$column}n + #{$column}):not(:last-child)
            [class*='__media']::before {
            display: none;
          }

          &:not(:last-child) [class*='__content']:last-child::before {
            content: '';
            display: block;
            background-color: clr(neutral, n200);
            width: math.div(space(0.125), 2);
            height: 100%;
            position: absolute;
            top: 0;
            right: calc(
              calc(calc(var(--grid-spacing) * 0.5) + space(0.125)) * -1
            );
          }

          &:nth-child(#{$column}n + #{$column}):not(:last-child)
            [class*='__content']:last-child::before {
            display: none;
          }
        }
      }

      [data-grid-columns='#{$column}'][data-grid-separators][data-hide-media]
        & {
        &:not(:last-child) [class*='__content']::before {
          content: '';
          display: block;
          background-color: clr(neutral, n200);
          width: math.div(space(0.125), 2);
          height: 100%;
          position: absolute;
          top: 0;
          right: calc(
            calc(calc(var(--grid-spacing) * 0.5) + space(0.125)) * -1
          );
        }

        &:nth-child(#{$column}n + #{$column}):not(:last-child)
          [class*='__content']::before {
          display: none;
        }
      }
    }
  }

  // single with separator column specific overrides
  [data-grid-columns='1']:not([data-grid-separators]) &:not(:first-child) {
    @include breakpoint('small') {
      margin-top: var(--grid-spacing);
    }
  }

  [data-grid-columns='1'][data-grid-separators] &:not(:first-child) {
    border-top: 1px solid clr(neutral, n300);
  }

  [data-grid-columns='1'][data-grid-spacing='two-spacing'] &:not(:first-child) {
    padding-top: calc(var(--grid-spacing) / 2);
  }

  [data-grid-columns='1'] & {
    width: 100%;
    margin: 0 0 calc(var(--grid-spacing) / 2);

    &:last-child {
      margin: 0;
    }

    [data-teaser-layout='postcard'] & {
      margin: var(--grid-spacing) calc(var(--grid-spacing) / 2) 0;
    }
  }
}
