{"version":3,"file":"js/03-organisms/navigation/breadcrumbs/breadcrumbs.js","mappings":";;;;;AAAAA,MAAM,CAACC,SAAS,CAACC,WAAW,CAAG,CAC7BC,MAAM,UAAAA,OAACC,CAAO,CAAE,CA2Bd,QAAS,CAAAC,CAAeA,CAAA,CAAG,IACnB,CAAAC,CAAe,CAAGJ,CAAW,CAACK,qBAAqB,EAAE,CAACC,IAAI,CAC1DC,CAAgB,CACpBP,CAAW,CAACQ,gBAAgB,CAAC,oBAAoB,CAAC,CAC9CC,CAAY,CAAG,EAAE,CAWvB,MATA,CAAAF,CAAgB,CAACG,OAAO,CAAC,SAACC,CAAI,CAAK,CAE/BA,CAAI,CAACN,qBAAqB,EAAE,CAACO,KAAK,CAClCR,CAAe,CAAGS,CAAa,EAE/BJ,CAAY,CAACK,IAAI,CAACH,CAAI,CAE1B,CAAC,CAAC,CAEKF,CAAY,CAAC,CAAC,CAAC,CAACM,UAAU,CAAGF,CACtC,CASA,QAAS,CAAAG,CAAaA,CAAA,CAAG,IACjB,CAAAZ,CAAe,CAAGJ,CAAW,CAACK,qBAAqB,EAAE,CAACC,IAAI,CAC1DC,CAAgB,CACpBP,CAAW,CAACQ,gBAAgB,CAAC,oBAAoB,CAAC,CAC9CS,CAAW,CAAG,EAAE,CAWtB,MATA,CAAAV,CAAgB,CAACG,OAAO,CAAC,SAACC,CAAI,CAAK,CAC7BA,CAAI,CAACN,qBAAqB,EAAE,CAACC,IAAI,CAAGF,CAAe,EACrDa,CAAW,CAACH,IAAI,CAACH,CAAI,CAEzB,CAAC,CAAC,CAKKM,CAAW,CAACA,CAAW,CAACC,MAAM,CAAG,CAAC,CAAC,CAACH,UAAU,CAAGF,CAC1D,CAOA,QAAS,CAAAM,CAAWA,CAAA,CAAG,IACf,CAAAf,CAAe,CAAGgB,CAAkB,CAACf,qBAAqB,EAAE,CAACC,IAAI,CACjEe,CAAgB,CAAGD,CAAkB,CAACf,qBAAqB,EAAE,CAACO,KAAK,CACnEU,CAAoB,CAAGtB,CAAW,CACrCuB,aAAa,CAAC,gCAAgC,CAAC,CAC/ClB,qBAAqB,EAAE,CAACC,IAAI,CACzBkB,CAAoB,CAAGC,IAAI,CAACC,KAAK,CACrC1B,CAAW,CACRuB,aAAa,CAAC,+BAA+B,CAAC,CAC9ClB,qBAAqB,EAAE,CAACO,KAAK,CACjC,CAEGU,CAAoB,CAAGlB,CAAe,CAGpCoB,CAAoB,CAAGH,CAAgB,CACd,MAAM,GAA7BM,CAA6B,GAC/BA,CAAkB,CAAG,MAAM,CAC3BC,CAAgB,CAACC,YAAY,CAAC,uBAAuB,CAAE,MAAM,CAAC,EAIhC,MAAM,GAA7BF,CAA6B,GACtCA,CAAkB,CAAG,MAAM,CAC3BC,CAAgB,CAACC,YAAY,CAAC,uBAAuB,CAAE,MAAM,CAAC,EAIvDL,CAAoB,CAAGH,CAAgB,CACrB,OAAO,GAA9BM,CAA8B,GAChCA,CAAkB,CAAG,OAAO,CAC5BC,CAAgB,CAACC,YAAY,CAAC,uBAAuB,CAAE,OAAO,CAAC,GAKjEF,CAAkB,CAAG,MAAM,CAC3BC,CAAgB,CAACC,YAAY,CAAC,uBAAuB,CAAE,MAAM,CAAC,CAElE,CAMA,QAAS,CAAAC,CAAQA,CAACC,CAAS,CAAE,CAC3B/B,CAAW,CAACgC,UAAU,CACN,OAAO,GAArBD,CAAqB,CAAG5B,CAAe,EAAE,CAAGa,CAAa,EAC7D,CAOA,QAAS,CAAAiB,CAAaA,CAACtB,CAAI,CAAE,IACrB,CAAAP,CAAe,CAAGgB,CAAkB,CAACf,qBAAqB,EAAE,CAACC,IAAI,CACjEe,CAAgB,CAAGD,CAAkB,CAACf,qBAAqB,EAAE,CAACO,KAAK,CAIvEa,IAAI,CAACC,KAAK,CAACf,CAAI,CAACN,qBAAqB,EAAE,CAACO,KAAK,CAAC,CAC9CS,CAAgB,CAAGR,CAAa,EAI6B,OAAO,GAAlEe,CAAgB,CAACM,YAAY,CAAC,uBAAuB,CAAa,EACP,MAAM,GAAjEN,CAAgB,CAACM,YAAY,CAAC,uBAAuB,CAAY,IAEjElC,CAAW,CAACgC,UAAU,CACpBrB,CAAI,CAACwB,aAAa,CAACpB,UAAU,CAAGF,CAAa,EAKjDY,IAAI,CAACC,KAAK,CAACf,CAAI,CAACN,qBAAqB,EAAE,CAACC,IAAI,CAAC,CAC7CF,CAAe,CAAGS,CAAa,GAI8B,MAAM,GAAjEe,CAAgB,CAACM,YAAY,CAAC,uBAAuB,CAAY,EACN,MAAM,GAAjEN,CAAgB,CAACM,YAAY,CAAC,uBAAuB,CAAY,IAEjEd,CAAkB,CAACY,UAAU,CAC3BrB,CAAI,CAACwB,aAAa,CAACpB,UAAU,CAAGF,CAAa,CAGrD,CAMA,QAAS,CAAAuB,CAAkBA,CAAA,CAAG,CAC5BhB,CAAkB,CAACS,YAAY,CAAC,2BAA2B,CAAE,UAAU,CAAC,CACxEQ,CAAiB,CAACR,YAAY,CAAC,eAAe,CAAE,MAAM,CACxD,CAeA,QAAS,CAAAS,CAAQA,CAACC,CAAI,CAAE,CACtB,GAAI,CAAAC,CAAK,CACT,MAAO,UAA0BC,CAAK,CAAE,CAClCD,CAAK,EAAEE,YAAY,CAACF,CAAK,CAAC,CAC9BA,CAAK,CAAGG,UAAU,CAACJ,CAAI,CAAE,GAAG,CAAEE,CAAK,CACrC,CACF,CA9LA,GAAM,CAAArB,CAAkB,CAAGlB,CAAO,CAACqB,aAAa,CAAC,uBAAuB,CAAC,CACzE,GAAKH,CAAkB,KAenB,CAAAO,CAAkB,CAZhB3B,CAAW,CAAGE,CAAO,CAACqB,aAAa,CACvC,iCAAiC,CAClC,CACKqB,CAAmB,CAAG1C,CAAO,CAACM,gBAAgB,CAClD,sBAAsB,CACvB,CACKqC,CAAgB,CAAG3C,CAAO,CAACM,gBAAgB,CAAC,oBAAoB,CAAC,CACjE6B,CAAiB,CAAGnC,CAAO,CAACqB,aAAa,CAAC,sBAAsB,CAAC,CACjEK,CAAgB,CAAG1B,CAAO,CAACqB,aAAa,CAAC,cAAc,CAAC,CACxDV,CAAa,CAAGX,CAAO,CAACqB,aAAa,CACzC,4BAA4B,CAC7B,CAACuB,WAAW,CA6JTT,CAAiB,EACnBA,CAAiB,CAACU,gBAAgB,CAAC,OAAO,CAAE,UAAM,CAChDX,CAAkB,EAAE,CACpBjB,CAAW,EACb,CAAC,CAAC,CAoBJ0B,CAAgB,CAACnC,OAAO,CAAC,SAACsC,CAAI,CAAK,CACjCA,CAAI,CAACD,gBAAgB,CAAC,OAAO,CAAE,UAAM,CACnCd,CAAa,CAACe,CAAI,CACpB,CAAC,CACH,CAAC,CAAC,CAKF7B,CAAW,EAAE,CAEbyB,CAAmB,CAAClC,OAAO,CAAC,SAACuC,CAAO,CAAK,CACvCA,CAAO,CAACF,gBAAgB,CAAC,OAAO,CAAE,SAACG,CAAC,CAAK,CACvCA,CAAC,CAACC,cAAc,EAAE,CAEdF,CAAO,CAACG,SAAS,CAACC,QAAQ,CAAC,4BAA4B,CAAC,CAC1DvB,CAAQ,CAAC,OAAO,CAAC,CAEjBA,CAAQ,CAAC,MAAM,CAEnB,CAAC,CACH,CAAC,CAAC,CAEF9B,CAAW,CAAC+C,gBAAgB,CAAC,QAAQ,CAAE5B,CAAW,CAAC,CAGnDmC,MAAM,CAACP,gBAAgB,CACrB,QAAQ,CACRT,CAAQ,CAAC,UAA0B,CACjCnB,CAAW,EACb,CAAC,CAAC,CACH,CACH,CACF,CAAC,C","sources":["webpack://emulsify-drupal/./components/03-organisms/navigation/breadcrumbs/breadcrumbs.js"],"sourcesContent":["Drupal.behaviors.breadcrumbs = {\n  attach(context) {\n    // Selectors.\n    const breadcrumbsWrapper = context.querySelector('.breadcrumbs__wrapper');\n    if (!breadcrumbsWrapper) {\n      return;\n    }\n    const breadcrumbs = context.querySelector(\n      '.breadcrumbs__menu-list-wrapper',\n    );\n    const breadcrumbsControls = context.querySelectorAll(\n      '.breadcrumbs__scroll',\n    );\n    const breadcrumbsLinks = context.querySelectorAll('.breadcrumbs__link');\n    const breadcrumbsButton = context.querySelector('.breadcrumbs__toggle');\n    const breadcrumbsInner = context.querySelector('.breadcrumbs');\n    const controlsWidth = context.querySelector(\n      '.breadcrumbs__scroll--left',\n    ).offsetWidth;\n    let scrollIndicatorDir;\n\n    /**\n     * getFirstVisible\n     * @description Get the first item that is visible (not overflown).\n     * @returns The value of the left edge of the first fully visible item plus\n     * the width of the controls so that things aren't visually hidden by the\n     * absolutely positioned elements.\n     */\n    function getFirstVisible() {\n      const breadcrumbsLeft = breadcrumbs.getBoundingClientRect().left;\n      const breadcrumbsItems =\n        breadcrumbs.querySelectorAll('.breadcrumbs__item');\n      const visibleItems = [];\n\n      breadcrumbsItems.forEach((item) => {\n        if (\n          item.getBoundingClientRect().right >\n          breadcrumbsLeft + controlsWidth\n        ) {\n          visibleItems.push(item);\n        }\n      });\n\n      return visibleItems[1].offsetLeft - controlsWidth;\n    }\n\n    /**\n     * getLastHidden\n     * @description Get the last item that is overflown (not visible).\n     * @returns The value of the left edge of the first partially hidden item\n     * minus the width of the controls so that things aren't visually hidden by\n     * the absolutely positioned elements.\n     */\n    function getLastHidden() {\n      const breadcrumbsLeft = breadcrumbs.getBoundingClientRect().left;\n      const breadcrumbsItems =\n        breadcrumbs.querySelectorAll('.breadcrumbs__item');\n      const hiddenItems = [];\n\n      breadcrumbsItems.forEach((item) => {\n        if (item.getBoundingClientRect().left < breadcrumbsLeft) {\n          hiddenItems.push(item);\n        }\n      });\n      // @TODO: if the user clicks the left arrow twice quickly when only the\n      // first item is hidden (and before the arrow can disappear), this line\n      // throws a js error. Not a huge deal, but could probably be refactored to\n      // prevent it from happening.\n      return hiddenItems[hiddenItems.length - 1].offsetLeft - controlsWidth;\n    }\n\n    /**\n     * setOverflow\n     * @description Get the positions of the breadcrumbs to determine whether an\n     * overflow situation is in play.\n     */\n    function setOverflow() {\n      const breadcrumbsLeft = breadcrumbsWrapper.getBoundingClientRect().left;\n      const breadcrumbsRight = breadcrumbsWrapper.getBoundingClientRect().right;\n      const firstBreadcrumbsLeft = breadcrumbs\n        .querySelector('.breadcrumbs__item:first-child')\n        .getBoundingClientRect().left;\n      const lastBreadcrumbsRight = Math.floor(\n        breadcrumbs\n          .querySelector('.breadcrumbs__item:last-child')\n          .getBoundingClientRect().right,\n      );\n\n      if (firstBreadcrumbsLeft < breadcrumbsLeft) {\n        // If left side of first breadcrumb is < left side of breadcrumbs.\n        // And right side of last breadcrumb is > right side of breadcrumbs.\n        if (lastBreadcrumbsRight > breadcrumbsRight) {\n          if (scrollIndicatorDir !== 'both') {\n            scrollIndicatorDir = 'both';\n            breadcrumbsInner.setAttribute('data-scroll-indicator', 'both');\n          }\n          // If left side of first breadcrumb is < left side of breadcrumbs.\n          // But right side of last breadcrumb is <= right side of breadcrumbs.\n        } else if (scrollIndicatorDir !== 'left') {\n          scrollIndicatorDir = 'left';\n          breadcrumbsInner.setAttribute('data-scroll-indicator', 'left');\n        }\n        // If left side of first breadcrumb is >= left side of breadcrumbs.\n        // And right side of last breadcrumb is > right side of breadcrumbs.\n      } else if (lastBreadcrumbsRight > breadcrumbsRight) {\n        if (scrollIndicatorDir !== 'right') {\n          scrollIndicatorDir = 'right';\n          breadcrumbsInner.setAttribute('data-scroll-indicator', 'right');\n        }\n        // If left side of first breadcrumb is >= left side of breadcrumbs.\n        // And right side of last breadcrumb is <= right side of breadcrumbs.\n      } else {\n        scrollIndicatorDir = 'none';\n        breadcrumbsInner.setAttribute('data-scroll-indicator', 'none');\n      }\n    }\n\n    /**\n     * mouseNav\n     * @description Support mouse navigation when horizontal scrolling occurs.\n     */\n    function mouseNav(direction) {\n      breadcrumbs.scrollLeft =\n        direction === 'right' ? getFirstVisible() : getLastHidden();\n    }\n\n    /**\n     * ensureVisible\n     * @description Ensure the focused tab is fully visible (not overflown).\n     * @param {HTMLElement} item The focused item.\n     */\n    function ensureVisible(item) {\n      const breadcrumbsLeft = breadcrumbsWrapper.getBoundingClientRect().left;\n      const breadcrumbsRight = breadcrumbsWrapper.getBoundingClientRect().right;\n\n      // if right side overflows control, set to left + control.\n      if (\n        Math.floor(item.getBoundingClientRect().right) >\n        breadcrumbsRight - controlsWidth\n      ) {\n        // If overflow right or both.\n        if (\n          breadcrumbsInner.getAttribute('data-scroll-indicator') === 'right' ||\n          breadcrumbsInner.getAttribute('data-scroll-indicator') === 'both'\n        ) {\n          breadcrumbs.scrollLeft =\n            item.parentElement.offsetLeft - controlsWidth;\n        }\n      }\n      // If left side overflows control, set to left + control.\n      else if (\n        Math.floor(item.getBoundingClientRect().left) <\n        breadcrumbsLeft + controlsWidth\n      ) {\n        // If overflow left or both.\n        if (\n          breadcrumbsInner.getAttribute('data-scroll-indicator') === 'left' ||\n          breadcrumbsInner.getAttribute('data-scroll-indicator') === 'both'\n        ) {\n          breadcrumbsWrapper.scrollLeft =\n            item.parentElement.offsetLeft - controlsWidth;\n        }\n      }\n    }\n\n    /**\n     * showAllBreadcrumbs\n     * @description remove breadcrumbs-overflow value.\n     */\n    function showAllBreadcrumbs() {\n      breadcrumbsWrapper.setAttribute('data-breadcrumbs-overflow', 'expanded');\n      breadcrumbsButton.setAttribute('aria-expanded', 'true');\n    }\n\n    // Show all breadcrumbs on mobile.\n    if (breadcrumbsButton) {\n      breadcrumbsButton.addEventListener('click', () => {\n        showAllBreadcrumbs();\n        setOverflow();\n      });\n    }\n\n    /**\n     * debounce\n     * @description Debounce to only run a function at most once every 200ms.\n     * @param {} func The function to be run after the timeout.\n     */\n    function debounce(func) {\n      let timer;\n      return function debounceFunction(event) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(func, 200, event);\n      };\n    }\n\n    /**\n     * linksListeners\n     * @description Support focus visualization.\n     */\n    breadcrumbsLinks.forEach((link) => {\n      link.addEventListener('focus', () => {\n        ensureVisible(link);\n      });\n    });\n\n    /**\n     * init\n     */\n    setOverflow();\n\n    breadcrumbsControls.forEach((control) => {\n      control.addEventListener('click', (e) => {\n        e.preventDefault();\n\n        if (control.classList.contains('breadcrumbs__scroll--right')) {\n          mouseNav('right');\n        } else {\n          mouseNav('left');\n        }\n      });\n    });\n\n    breadcrumbs.addEventListener('scroll', setOverflow);\n\n    // Listen for window resize.\n    window.addEventListener(\n      'resize',\n      debounce(function resizeListener() {\n        setOverflow();\n      }),\n    );\n  },\n};\n"],"names":["Drupal","behaviors","breadcrumbs","attach","context","getFirstVisible","breadcrumbsLeft","getBoundingClientRect","left","breadcrumbsItems","querySelectorAll","visibleItems","forEach","item","right","controlsWidth","push","offsetLeft","getLastHidden","hiddenItems","length","setOverflow","breadcrumbsWrapper","breadcrumbsRight","firstBreadcrumbsLeft","querySelector","lastBreadcrumbsRight","Math","floor","scrollIndicatorDir","breadcrumbsInner","setAttribute","mouseNav","direction","scrollLeft","ensureVisible","getAttribute","parentElement","showAllBreadcrumbs","breadcrumbsButton","debounce","func","timer","event","clearTimeout","setTimeout","breadcrumbsControls","breadcrumbsLinks","offsetWidth","addEventListener","link","control","e","preventDefault","classList","contains","window"],"sourceRoot":""}