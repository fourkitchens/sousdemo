{"version":3,"file":"css/00-base/colors/cl-colors.css","mappings":";;;AAKA,cACE,8DACA,yCACA,8DAGF,WACE,aAEA,iBACE,aACA,eACA,gBACA,UAGF,iBACE,gBACA,aACA,mBACA,aACA,gBACA,iBACA,aACA,sBACA,uBACA,2BACA,gBAGF,kBACE,eACA,iBACA,cACA,cAGF,mBACE,cACA,WACA,aACA,iBAGF,uBACE,cACA,WACA,eACA,mBACA,yCACA,qBAEA,6DAEE,aAIJ,4BACE,cACA,eACA,0CACA,kBACA,eACA,sDAEA,kCACE,yCACA,qDAgCJ,0BACE,8DACA,iBACA,yCA7BF,6CACE,0DACA,qEAYA,yDACE,8BAGF,wDACE,yGAnBJ,kDACE,+DACA,qEAYA,8DACE,oCAGF,6DACE,uGAnBJ,oDACE,iEACA,qEAYA,gEACE,sCAGF,+DACE,yGAnBJ,mDACE,gEACA,qEAYA,+DACE,qCAGF,8DACE,+FAnBJ,4CACE,yDACA,qEAYA,wDACE,6BAGF,uDACE,uGAnBJ,iDACE,8DACA,qEAYA,6DACE,mCAGF,4DACE,wGAnBJ,mDACE,gEACA,qEAYA,+DACE,qCAGF,8DACE,kFAnBJ,kDACE,+DACA,qEAYA,8DACE,oCAGF,6DACE,yGAnBJ,gDACE,8DACA,qEAYA,4DACE,iCAGF,2DACE,uEAnBJ,wDACE,sEACA,qEAYA,oEACE,0CAGF,mEACE,sGAnBJ,0CACE,oDACA,qEAYA,sDACE,2BAGF,qDACE,sGAnBJ,kDACE,4DACA,qEAYA,8DACE,oCAGF,6DACE,uEAnBJ,6CACE,2DACA,qEAYA,yDACE,8BAGF,wDACE,8FAnBJ,kDACE,gEACA,qEAYA,8DACE,oCAGF,6DACE,sFAnBJ,iDACE,+DACA,qEAYA,6DACE,mCAGF,4DACE,iFAnBJ,kDACE,gEACA,qEAYA,8DACE,oCAGF,6DACE,gFAnBJ,kDACE,gEACA,qEAYA,8DACE,oCAGF,6DACE,iFAnBJ,kDACE,gEACA,qEAYA,8DACE,oCAGF,6DACE,8FAnBJ,kDACE,gEACA,qEAYA,8DACE,oCAGF,6DACE,8FAnBJ,kDACE,gEACA,qEAYA,8DACE,oCAGF,6DACE,8EAnBJ,kDACE,gEACA,qEAYA,8DACE,oCAGF,6DACE,2FAnBJ,kDACE,gEACA,qEAYA,8DACE,oCAGF,6DACE,gFAnBJ,6CACE,yDACA,qEAYA,yDACE,8BAGF,wDACE,6FAnBJ,6CACE,0DACA,qEAYA,yDACE,8BAGF,wDACE,8FAnBJ,2CACE,uDACA,qEAYA,uDACE,4BAGF,sDACE,wGAnBJ,gDACE,8DACA,qEAYA,4DACE,iCAGF,2DACE,uEAnBJ,gDACE,wDACA,qEAYA,4DACE,iCAGF,2DACE,+D","sources":["webpack://emulsify-drupal/./components/00-base/colors/cl-colors.scss"],"sourcesContent":["@use '../functions/color' as *;\n@use '../spacing/spacing' as *;\n@use './color-definitions' as *;\n\n// These styles only affect the colors \"Usage\" page in the component library\n.sb-show-main {\n  background-color: clr(background);\n  color: clr(text);\n  border-top: space(1) solid clr(accent);\n}\n\n.cl-colors {\n  padding: space(1);\n\n  &__list {\n    display: flex;\n    flex-wrap: wrap;\n    margin: 0 0 space(2);\n    padding: 0;\n  }\n\n  &__item {\n    list-style: none;\n    padding: space(1);\n    transition: all 0.4s;\n    flex: 1 1 20%;\n    min-width: space(1) * 20;\n    min-height: space(1) * 18;\n    display: flex;\n    flex-flow: column wrap;\n    align-items: flex-start;\n    justify-content: flex-start;\n    font-weight: 600;\n  }\n\n  &__title {\n    font-size: 120%;\n    padding: space(0.25) 0;\n    display: block;\n    line-height: 1;\n  }\n\n  &__swatch {\n    display: block;\n    width: 100%;\n    padding: space(3);\n    margin: 0 0 space(0.5);\n  }\n\n  &__definition {\n    display: block;\n    width: 100%;\n    padding: space(0.25);\n    font-weight: normal;\n    color: clr(text);\n    white-space: pre-wrap;\n\n    &::before,\n    &::after {\n      display: none;\n    }\n  }\n\n  &__definition_item {\n    display: block;\n    cursor: pointer;\n    color: clr(text, 0.8);\n    margin: 0 0 space(0.25);\n    padding: space(0.25);\n    background-color: clr(text, 0.05);\n\n    &:hover {\n      color: clr(text);\n      background-color: clr(text, 0.1);\n    }\n  }\n}\n\n@mixin color-swatch($color, $variant: null) {\n  > .cl-colors__swatch {\n    background-color: clr($color, $variant);\n    box-shadow: 0 2px 10px clr(neutral, '100', 0.5);\n  }\n}\n\n// Display proper usage of the color with clr() function.\n// Display hex, rgba, and hsla definitions for reference.\n@mixin color-definition($color, $clrname, $variant: null) {\n  @if $variant {\n    $variant: ', ' + $variant;\n  }\n\n  > .cl-colors__definition {\n    &::before {\n      content: 'Usage: clr(#{$clrname}#{$variant})';\n    }\n\n    &::after {\n      content: '#{cnvrt-clr($color)}<br>rgba(#{cnvrt-clr($color, 'rgba')})<br>hsla(#{cnvrt-clr($color, 'hsla')})';\n    }\n  }\n}\n\n// Set color swatch styles based on defined color in $color-palette.\n@each $theme, $palette in $color-palette {\n  .cl-colors__list--#{$theme} {\n    background-color: clr(background);\n    padding: 0 0 space(2);\n    color: clr(text);\n  }\n\n  @each $clrname, $color in $palette {\n    @if type-of($color) == map {\n      @each $variant, $value in $color {\n        @if $variant == 'base' {\n          .cl-colors__item--#{$clrname} {\n            @include color-swatch($clrname);\n            @include color-definition($value, $clrname);\n          }\n        } @else {\n          .cl-colors__item--#{$clrname}-#{$variant} {\n            @include color-swatch($clrname, $variant);\n            @include color-definition($value, $clrname, $variant);\n          }\n        }\n      }\n    } @else {\n      .cl-colors__item--#{$clrname} {\n        @include color-swatch($clrname);\n        @include color-definition($color, $clrname);\n      }\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}