{"version":3,"file":"css/00-base/base.css","mappings":";;;AAMA,MAQc,0BAEA,+FAFA,yBAEA,6FAFA,8BAEA,kCAFA,oBAEA,gCAFA,2BAEA,sRAIJ,gIAWN,2BAKU,0BAEA,+FAFA,yBAEA,6FAFA,8BAEA,kCAFA,oBAEA,gCAFA,2BAEA,sRAIJ,gIAKN,sCAKU,0BAEA,+FAFA,yBAEA,6FAFA,8BAEA,kCAFA,oBAEA,gCAFA,2BAEA,sRAIJ,gIC9CV,iBARE,6BACA,8BACA,gBACA,WACA,UACA,iBAgBA,gBALA,iFACA,uBAWA,4BACE,aAQJ,uFAGE,gBACA,iBAIF,MACE,aCzCF,KACE,sBAIF,KACE,aACA,kBACA,kBACA,8DACA,uBACA,gBACA,SACA,8DAGF,qBAGE,sBAGF,kBACE,mDACA,iDAFF,aACE,mDACA,iDAIF,qBACE,aACA,+BAGF,2BACE,qBACA,yDAGF,2BACE,qBACA,yDAIF,sCASE,SAIF,4BAEE,gBAIF,kBACE,uBAIF,YAEE,eACA,cAIF,6BAIE,aAIF,uCACE,kBACE,qBAGF,qBAGE,oCACA,uCACA,qCACA,iC","sources":["webpack://emulsify-drupal/./components/00-base/colors/_color-properties.scss","webpack://emulsify-drupal/./components/00-base/utility/_utility.scss","webpack://emulsify-drupal/./components/00-base/base.scss"],"sourcesContent":["@use '../functions/color' as *;\n@use './color-definitions' as *;\n\n// Create CSS custom properties based on the color-palette map.\n// For each color variable (e.g. `text` and `background`) a css custom\n// property will be created. (e.g. `--c-text:` and `--c-background:`).\n:root {\n  // Create custom properties from the default theme.\n  @each $theme, $palette in $color-palette {\n    @if $theme == 'default' {\n      @each $name, $color in $palette {\n        @if type-of($color) == map {\n          @each $clrname, $value in $color {\n            @if $clrname == 'base' {\n              --c-#{$name}: #{cnvrt-clr($value, $format)};\n            } @else {\n              --c-#{$name}-#{$clrname}: #{cnvrt-clr($value, $format)};\n            }\n          }\n        } @else {\n          --c-#{$name}: #{cnvrt-clr($color, $format)};\n        }\n      }\n    }\n  }\n\n  // Redefine the color custom properties when markup\n  // has a data-theme attribute set. This can be set\n  // on the body tag to affect the entire page or set\n  // on any tag within the page to affect it's children.\n  @each $theme, $palette in $color-palette {\n    [data-theme='#{$theme}'] {\n      @each $name, $color in $palette {\n        @if type-of($color) == map {\n          @each $clrname, $value in $color {\n            @if $clrname == 'base' {\n              --c-#{$name}: #{cnvrt-clr($value, $format)};\n            } @else {\n              --c-#{$name}-#{$clrname}: #{cnvrt-clr($value, $format)};\n            }\n          }\n        } @else {\n          --c-#{$name}: #{cnvrt-clr($color, $format)};\n        }\n      }\n    }\n\n    [data-component-theme*='#{$theme}'] {\n      @each $name, $color in $palette {\n        @if type-of($color) == map {\n          @each $clrname, $value in $color {\n            @if $clrname == 'base' {\n              --c-#{$name}: #{cnvrt-clr($value, $format)};\n            } @else {\n              --c-#{$name}-#{$clrname}: #{cnvrt-clr($value, $format)};\n            }\n          }\n        } @else {\n          --c-#{$name}: #{cnvrt-clr($color, $format)};\n        }\n      }\n    }\n  }\n\n  // Uncomment the following code to enable user-controllable dark mode via\n  // their OS or User-Agent setting.\n  // See: https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\n  // @media (prefers-color-scheme: dark) {\n  //   @each $theme, $palette in $color-palette {\n  //     // Change the following theme value to any theme you've defined in\n  //     // _01-color-definitions.scss to be the representative dark-mode.\n  //     @if ($theme == 'dark') {\n  //       @each $name, $color in $palette {\n  //         @if (type-of($color) == map) {\n  //           @each $clrname, $value in $color {\n  //             @if ($clrname == 'base') {\n  //               --c-#{$name}: #{cnvrt-clr($value, $format)};\n  //             }\n  //             @else {\n  //               --c-#{$name}-#{$clrname}: #{cnvrt-clr($value, $format)};\n  //             }\n  //           }\n  //         }\n  //         @else {\n  //           --c-#{$name}: #{cnvrt-clr($color, $format)};\n  //         }\n  //       }\n  //     }\n  //   }\n  // }\n}\n","@use '../functions/color' as *;\n@use '../spacing/spacing' as *;\n\n@mixin visually-hidden {\n  position: absolute !important;\n  clip: rect(1px, 1px, 1px, 1px);\n  overflow: hidden;\n  height: 1px;\n  width: 1px;\n  word-wrap: normal;\n}\n\n.visually-hidden {\n  @include visually-hidden;\n}\n\n// These are abstracted from the general use `focus` mixin below to support\n// use-cases like `focus-within` that apply to an \"outer\" element when something\n// \"inside\" has focus. e.g. The utility nav search box.\n@mixin focus-styles {\n  outline: space(0.125) dotted clr(neutral, n500) !important;\n  outline-offset: space(0.125);\n}\n\n@mixin focus {\n  &:focus-visible {\n    @include focus-styles;\n  }\n\n  // Remove browser focus indicator from browsers that support `:focus-visible`\n  // This allows older browsers (e.g. Safari) to show default styles, while\n  // modern browsers use our focus designs.\n  &:focus:not(:focus-visible) {\n    outline: none;\n  }\n}\n\n* {\n  @include focus;\n}\n\nbody[data-body-frozen],\nbody[data-offcanvas-active='true'],\nbody[data-gallery-active='true'] {\n  overflow: hidden;\n  max-height: 100vh;\n}\n\n// Prevent all instances of double returns\nbr + br {\n  display: none;\n}\n","@use 'functions/color' as *;\n@use 'spacing/spacing' as *;\n@forward 'colors/color-definitions';\n@forward 'colors/color-properties';\n@forward 'utility/utility';\n\n// Reset Styles\n\n/* Box sizing rules */\nhtml {\n  box-sizing: border-box;\n}\n\n/* Set core body defaults */\nbody {\n  height: 100vh;\n  overflow-x: hidden;\n  overflow-y: scroll;\n  scroll-snap-type: y mandatory;\n  scroll-behavior: smooth;\n  max-width: 100vw;\n  margin: 0;\n  background-color: clr(background);\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n*::selection {\n  background: clr(accent);\n  color: clr(text, inverse);\n}\n\n// Custom scrollbar styles\n*::-webkit-scrollbar {\n  width: space(0.75);\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: space(0.75);\n  background-color: clr(accent);\n}\n\n*::-webkit-scrollbar-track {\n  border-radius: space(0.75);\n  background-color: clr(full-black, 0.1);\n}\n\n/* Remove default margin */\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n    scroll-behavior: auto;\n  }\n\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n"],"names":[],"sourceRoot":""}